{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dice\\\\dice-roll-finance\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\n\n// ID сети Sepolia\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SEPOLIA_CHAIN_ID = 11155111;\nexport const SEPOLIA_CHAIN_ID_HEX = '0x7a69'; // Hex для Sepolia\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [SEPOLIA_CHAIN_ID] // Sepolia\n});\nconst Web3Context = /*#__PURE__*/createContext(null);\nexport const Web3Provider = ({\n  children\n}) => {\n  _s();\n  const {\n    activate,\n    account,\n    library,\n    active,\n    chainId\n  } = useWeb3React();\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const [tokenContract, setTokenContract] = useState(null);\n  const [isMinting, setIsMinting] = useState(false);\n  const [networkError, setNetworkError] = useState(null);\n\n  // Адрес токена и его ABI\n  const tokenAddress = \"0xf6eef65b150661e649a31ba890d36ff6901c7ffd\";\n  const tokenAbi = [{\n    \"inputs\": [],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"\",\n      \"type\": \"uint256\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"address\",\n      \"name\": \"to\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"amount\",\n      \"type\": \"uint256\"\n    }],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n\n  // Проверка сети\n  useEffect(() => {\n    if (active && chainId && chainId !== SEPOLIA_CHAIN_ID) {\n      setNetworkError(`Пожалуйста, переключитесь на сеть Sepolia (ID: ${SEPOLIA_CHAIN_ID})`);\n    } else {\n      setNetworkError(null);\n    }\n  }, [active, chainId]);\n\n  // Подключение кошелька\n  const connectWallet = async () => {\n    try {\n      console.log(\"Попытка подключения к MetaMask...\");\n      await activate(injected);\n      console.log(\"Успешно подключено к MetaMask!\");\n    } catch (error) {\n      console.error(\"Ошибка подключения кошелька:\", error);\n      alert(`Ошибка подключения: ${error.message}. Убедитесь, что MetaMask установлен и разблокирован.`);\n    }\n  };\n\n  // Переключение на Sepolia\n  const switchToSepolia = async () => {\n    if (!window.ethereum) {\n      alert(\"Установите MetaMask!\");\n      return;\n    }\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: SEPOLIA_CHAIN_ID_HEX\n        }]\n      });\n      setNetworkError(null);\n    } catch (switchError) {\n      // Если сеть не добавлена, попробуем добавить\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: SEPOLIA_CHAIN_ID_HEX,\n              chainName: 'Sepolia Test Network',\n              nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                decimals: 18\n              },\n              rpcUrls: ['https://rpc.sepolia.org/'],\n              blockExplorerUrls: ['https://sepolia.etherscan.io/']\n            }]\n          });\n          setNetworkError(null);\n        } catch (addError) {\n          console.error('Ошибка добавления сети Sepolia:', addError);\n          alert('Не удалось добавить сеть Sepolia. Проверьте настройки MetaMask.');\n        }\n      } else {\n        console.error('Ошибка переключения сети:', switchError);\n        alert('Не удалось переключиться на сеть Sepolia.');\n      }\n    }\n  };\n\n  // Получение тестовых токенов\n  const getTestTokens = async () => {\n    if (!tokenContract || !account) {\n      console.error(\"Контракт токена или аккаунт не определены\");\n      return;\n    }\n    try {\n      setIsMinting(true);\n      const tx = await tokenContract.mint(account, ethers.utils.parseUnits(\"1000\", 18));\n      await tx.wait();\n      console.log(\"Токены успешно получены!\");\n    } catch (error) {\n      console.error(\"Ошибка получения тестовых токенов:\", error);\n      alert(\"Ошибка получения токенов. Возможно, контракт не поддерживает mint или вы не в сети Sepolia.\");\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  // Инициализация контракта\n  useEffect(() => {\n    if (active && library) {\n      const contract = new ethers.Contract(tokenAddress, tokenAbi, library.getSigner());\n      setTokenContract(contract);\n    }\n  }, [active, library]);\n\n  // Получение баланса\n  useEffect(() => {\n    const fetchBalance = async () => {\n      if (tokenContract && account) {\n        try {\n          const balance = await tokenContract.balanceOf(account);\n          setTokenBalance(ethers.utils.formatUnits(balance, 18));\n        } catch (error) {\n          console.error(\"Ошибка получения баланса:\", error);\n        }\n      }\n    };\n    fetchBalance();\n  }, [tokenContract, account]);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      connectWallet,\n      switchToSepolia,\n      getTestTokens,\n      account,\n      active,\n      chainId,\n      tokenBalance,\n      tokenContract,\n      isMinting,\n      networkError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(Web3Provider, \"EJk3F896j0WTtwxLyscu4vqge4M=\", false, function () {\n  return [useWeb3React];\n});\n_c = Web3Provider;\nexport const useWeb3 = () => {\n  _s2();\n  return useContext(Web3Context);\n};\n_s2(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","ethers","useWeb3React","InjectedConnector","jsxDEV","_jsxDEV","SEPOLIA_CHAIN_ID","SEPOLIA_CHAIN_ID_HEX","injected","supportedChainIds","Web3Context","Web3Provider","children","_s","activate","account","library","active","chainId","tokenBalance","setTokenBalance","tokenContract","setTokenContract","isMinting","setIsMinting","networkError","setNetworkError","tokenAddress","tokenAbi","connectWallet","console","log","error","alert","message","switchToSepolia","window","ethereum","request","method","params","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","getTestTokens","tx","mint","utils","parseUnits","wait","contract","Contract","getSigner","fetchBalance","balance","balanceOf","formatUnits","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeb3","_s2","$RefreshReg$"],"sources":["C:/Dice/dice-roll-finance/src/context/Web3Context.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\n\r\n// ID сети Sepolia\r\nexport const SEPOLIA_CHAIN_ID = 11155111;\r\nexport const SEPOLIA_CHAIN_ID_HEX = '0x7a69'; // Hex для Sepolia\r\n\r\nexport const injected = new InjectedConnector({ \r\n  supportedChainIds: [SEPOLIA_CHAIN_ID] // Sepolia\r\n});\r\n\r\nconst Web3Context = createContext(null);\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n  const { activate, account, library, active, chainId } = useWeb3React();\r\n  const [tokenBalance, setTokenBalance] = useState(0);\r\n  const [tokenContract, setTokenContract] = useState(null);\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [networkError, setNetworkError] = useState(null);\r\n\r\n  // Адрес токена и его ABI\r\n  const tokenAddress = \"0xf6eef65b150661e649a31ba890d36ff6901c7ffd\";\r\n  const tokenAbi = [\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"balanceOf\",\r\n      \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\"},\r\n        {\"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\"}\r\n      ],\r\n      \"name\": \"mint\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }\r\n  ];\r\n\r\n  // Проверка сети\r\n  useEffect(() => {\r\n    if (active && chainId && chainId !== SEPOLIA_CHAIN_ID) {\r\n      setNetworkError(`Пожалуйста, переключитесь на сеть Sepolia (ID: ${SEPOLIA_CHAIN_ID})`);\r\n    } else {\r\n      setNetworkError(null);\r\n    }\r\n  }, [active, chainId]);\r\n\r\n  // Подключение кошелька\r\n  const connectWallet = async () => {\r\n    try {\r\n      console.log(\"Попытка подключения к MetaMask...\");\r\n      await activate(injected);\r\n      console.log(\"Успешно подключено к MetaMask!\");\r\n    } catch (error) {\r\n      console.error(\"Ошибка подключения кошелька:\", error);\r\n      alert(`Ошибка подключения: ${error.message}. Убедитесь, что MetaMask установлен и разблокирован.`);\r\n    }\r\n  };\r\n\r\n  // Переключение на Sepolia\r\n  const switchToSepolia = async () => {\r\n    if (!window.ethereum) {\r\n      alert(\"Установите MetaMask!\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: SEPOLIA_CHAIN_ID_HEX }],\r\n      });\r\n      setNetworkError(null);\r\n    } catch (switchError) {\r\n      // Если сеть не добавлена, попробуем добавить\r\n      if (switchError.code === 4902) {\r\n        try {\r\n          await window.ethereum.request({\r\n            method: 'wallet_addEthereumChain',\r\n            params: [{\r\n              chainId: SEPOLIA_CHAIN_ID_HEX,\r\n              chainName: 'Sepolia Test Network',\r\n              nativeCurrency: {\r\n                name: 'Ethereum',\r\n                symbol: 'ETH',\r\n                decimals: 18\r\n              },\r\n              rpcUrls: ['https://rpc.sepolia.org/'],\r\n              blockExplorerUrls: ['https://sepolia.etherscan.io/']\r\n            }],\r\n          });\r\n          setNetworkError(null);\r\n        } catch (addError) {\r\n          console.error('Ошибка добавления сети Sepolia:', addError);\r\n          alert('Не удалось добавить сеть Sepolia. Проверьте настройки MetaMask.');\r\n        }\r\n      } else {\r\n        console.error('Ошибка переключения сети:', switchError);\r\n        alert('Не удалось переключиться на сеть Sepolia.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Получение тестовых токенов\r\n  const getTestTokens = async () => {\r\n    if (!tokenContract || !account) {\r\n      console.error(\"Контракт токена или аккаунт не определены\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsMinting(true);\r\n      const tx = await tokenContract.mint(\r\n        account, \r\n        ethers.utils.parseUnits(\"1000\", 18)\r\n      );\r\n      await tx.wait();\r\n      console.log(\"Токены успешно получены!\");\r\n    } catch (error) {\r\n      console.error(\"Ошибка получения тестовых токенов:\", error);\r\n      alert(\"Ошибка получения токенов. Возможно, контракт не поддерживает mint или вы не в сети Sepolia.\");\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  // Инициализация контракта\r\n  useEffect(() => {\r\n    if (active && library) {\r\n      const contract = new ethers.Contract(\r\n        tokenAddress,\r\n        tokenAbi,\r\n        library.getSigner()\r\n      );\r\n      setTokenContract(contract);\r\n    }\r\n  }, [active, library]);\r\n\r\n  // Получение баланса\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      if (tokenContract && account) {\r\n        try {\r\n          const balance = await tokenContract.balanceOf(account);\r\n          setTokenBalance(ethers.utils.formatUnits(balance, 18));\r\n        } catch (error) {\r\n          console.error(\"Ошибка получения баланса:\", error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    fetchBalance();\r\n  }, [tokenContract, account]);\r\n\r\n  return (\r\n    <Web3Context.Provider value={{\r\n      connectWallet,\r\n      switchToSepolia,\r\n      getTestTokens,\r\n      account,\r\n      active,\r\n      chainId,\r\n      tokenBalance,\r\n      tokenContract,\r\n      isMinting,\r\n      networkError\r\n    }}>\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n\r\nexport const useWeb3 = () => useContext(Web3Context);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,gBAAgB,GAAG,QAAQ;AACxC,OAAO,MAAMC,oBAAoB,GAAG,QAAQ,CAAC,CAAC;;AAE9C,OAAO,MAAMC,QAAQ,GAAG,IAAIL,iBAAiB,CAAC;EAC5CM,iBAAiB,EAAE,CAACH,gBAAgB,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,MAAMI,WAAW,gBAAGb,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMc,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,OAAO;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGhB,YAAY,CAAC,CAAC;EACtE,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAM2B,YAAY,GAAG,4CAA4C;EACjE,MAAMC,QAAQ,GAAG,CACf;IACE,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,WAAW;IACnB,SAAS,EAAE,CAAC;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,EAAE;MAAE,MAAM,EAAE;IAAS,CAAC,CAAC;IACvE,iBAAiB,EAAE,MAAM;IACzB,MAAM,EAAE;EACV,CAAC,EACD;IACE,QAAQ,EAAE,CACR;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,IAAI;MAAE,MAAM,EAAE;IAAS,CAAC,EAC5D;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,QAAQ;MAAE,MAAM,EAAE;IAAS,CAAC,CACjE;IACD,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,EAAE;IACb,iBAAiB,EAAE,YAAY;IAC/B,MAAM,EAAE;EACV,CAAC,CACF;;EAED;EACA7B,SAAS,CAAC,MAAM;IACd,IAAIkB,MAAM,IAAIC,OAAO,IAAIA,OAAO,KAAKZ,gBAAgB,EAAE;MACrDoB,eAAe,CAAC,kDAAkDpB,gBAAgB,GAAG,CAAC;IACxF,CAAC,MAAM;MACLoB,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC,EAAE,CAACT,MAAM,EAAEC,OAAO,CAAC,CAAC;;EAErB;EACA,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAMjB,QAAQ,CAACN,QAAQ,CAAC;MACxBsB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDC,KAAK,CAAC,uBAAuBD,KAAK,CAACE,OAAO,uDAAuD,CAAC;IACpG;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;MACpBJ,KAAK,CAAC,sBAAsB,CAAC;MAC7B;IACF;IAEA,IAAI;MACF,MAAMG,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAC5BC,MAAM,EAAE,4BAA4B;QACpCC,MAAM,EAAE,CAAC;UAAEtB,OAAO,EAAEX;QAAqB,CAAC;MAC5C,CAAC,CAAC;MACFmB,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOe,WAAW,EAAE;MACpB;MACA,IAAIA,WAAW,CAACC,IAAI,KAAK,IAAI,EAAE;QAC7B,IAAI;UACF,MAAMN,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;YAC5BC,MAAM,EAAE,yBAAyB;YACjCC,MAAM,EAAE,CAAC;cACPtB,OAAO,EAAEX,oBAAoB;cAC7BoC,SAAS,EAAE,sBAAsB;cACjCC,cAAc,EAAE;gBACdC,IAAI,EAAE,UAAU;gBAChBC,MAAM,EAAE,KAAK;gBACbC,QAAQ,EAAE;cACZ,CAAC;cACDC,OAAO,EAAE,CAAC,0BAA0B,CAAC;cACrCC,iBAAiB,EAAE,CAAC,+BAA+B;YACrD,CAAC;UACH,CAAC,CAAC;UACFvB,eAAe,CAAC,IAAI,CAAC;QACvB,CAAC,CAAC,OAAOwB,QAAQ,EAAE;UACjBpB,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEkB,QAAQ,CAAC;UAC1DjB,KAAK,CAAC,iEAAiE,CAAC;QAC1E;MACF,CAAC,MAAM;QACLH,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAES,WAAW,CAAC;QACvDR,KAAK,CAAC,2CAA2C,CAAC;MACpD;IACF;EACF,CAAC;;EAED;EACA,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC9B,aAAa,IAAI,CAACN,OAAO,EAAE;MAC9Be,OAAO,CAACE,KAAK,CAAC,2CAA2C,CAAC;MAC1D;IACF;IAEA,IAAI;MACFR,YAAY,CAAC,IAAI,CAAC;MAClB,MAAM4B,EAAE,GAAG,MAAM/B,aAAa,CAACgC,IAAI,CACjCtC,OAAO,EACPd,MAAM,CAACqD,KAAK,CAACC,UAAU,CAAC,MAAM,EAAE,EAAE,CACpC,CAAC;MACD,MAAMH,EAAE,CAACI,IAAI,CAAC,CAAC;MACf1B,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DC,KAAK,CAAC,6FAA6F,CAAC;IACtG,CAAC,SAAS;MACRT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACAzB,SAAS,CAAC,MAAM;IACd,IAAIkB,MAAM,IAAID,OAAO,EAAE;MACrB,MAAMyC,QAAQ,GAAG,IAAIxD,MAAM,CAACyD,QAAQ,CAClC/B,YAAY,EACZC,QAAQ,EACRZ,OAAO,CAAC2C,SAAS,CAAC,CACpB,CAAC;MACDrC,gBAAgB,CAACmC,QAAQ,CAAC;IAC5B;EACF,CAAC,EAAE,CAACxC,MAAM,EAAED,OAAO,CAAC,CAAC;;EAErB;EACAjB,SAAS,CAAC,MAAM;IACd,MAAM6D,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAIvC,aAAa,IAAIN,OAAO,EAAE;QAC5B,IAAI;UACF,MAAM8C,OAAO,GAAG,MAAMxC,aAAa,CAACyC,SAAS,CAAC/C,OAAO,CAAC;UACtDK,eAAe,CAACnB,MAAM,CAACqD,KAAK,CAACS,WAAW,CAACF,OAAO,EAAE,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,OAAO7B,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;MACF;IACF,CAAC;IAED4B,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACvC,aAAa,EAAEN,OAAO,CAAC,CAAC;EAE5B,oBACEV,OAAA,CAACK,WAAW,CAACsD,QAAQ;IAACC,KAAK,EAAE;MAC3BpC,aAAa;MACbM,eAAe;MACfgB,aAAa;MACbpC,OAAO;MACPE,MAAM;MACNC,OAAO;MACPC,YAAY;MACZE,aAAa;MACbE,SAAS;MACTE;IACF,CAAE;IAAAb,QAAA,EACCA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxD,EAAA,CAhKWF,YAAY;EAAA,QACiCT,YAAY;AAAA;AAAAoE,EAAA,GADzD3D,YAAY;AAkKzB,OAAO,MAAM4D,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM1E,UAAU,CAACY,WAAW,CAAC;AAAA;AAAC8D,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}